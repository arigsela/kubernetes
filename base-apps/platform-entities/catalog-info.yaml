apiVersion: backstage.io/v1alpha1
kind: Group
metadata:
  name: platform-team
  description: Platform Engineering Team
  annotations:
    backstage.io/kubernetes-id: platform-entities
    backstage.io/kubernetes-namespace: default
    terasky.backstage.io/add-to-catalog: "true"
    terasky.backstage.io/component-type: group
spec:
  type: team
  children: []
---
apiVersion: backstage.io/v1alpha1
kind: System
metadata:
  name: examples
  description: Example applications and demos
spec:
  owner: platform-team
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: mysqldatabase-platform.io--v1alpha1
  description: MySQL Database Crossplane Claim API
  tags:
    - crossplane
    - mysql
    - database
    - platform-api
  links:
    - url: https://doc.crds.dev/github.com/crossplane/provider-aws/database.aws.crossplane.io/RDSInstance/v1beta1@v0.28.1
      title: Crossplane AWS RDS Docs
      icon: docs
spec:
  type: openapi
  lifecycle: production
  owner: platform-team
  system: examples
  definition: |
    openapi: 3.0.1
    info:
      title: MySQL Database Crossplane API
      version: v1alpha1
      description: |
        API for managing MySQL databases through Crossplane Claims.
        This API allows you to create, configure, and manage MySQL database instances
        using Kubernetes Custom Resources.
    servers:
      - url: https://kubernetes.default.svc/apis/platform.io/v1alpha1
        description: Kubernetes API Server
    paths:
      /namespaces/{namespace}/mysqldatabases:
        get:
          summary: List MySQL databases in a namespace
          operationId: listMySQLDatabases
          parameters:
            - name: namespace
              in: path
              required: true
              schema:
                type: string
          responses:
            '200':
              description: List of MySQL databases
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/MySQLDatabase'
        post:
          summary: Create a new MySQL database
          operationId: createMySQLDatabase
          parameters:
            - name: namespace
              in: path
              required: true
              schema:
                type: string
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MySQLDatabase'
          responses:
            '201':
              description: Database created successfully
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/MySQLDatabase'
      /namespaces/{namespace}/mysqldatabases/{name}:
        get:
          summary: Get a specific MySQL database
          operationId: getMySQLDatabase
          parameters:
            - name: namespace
              in: path
              required: true
              schema:
                type: string
            - name: name
              in: path
              required: true
              schema:
                type: string
          responses:
            '200':
              description: MySQL database details
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/MySQLDatabase'
        delete:
          summary: Delete a MySQL database
          operationId: deleteMySQLDatabase
          parameters:
            - name: namespace
              in: path
              required: true
              schema:
                type: string
            - name: name
              in: path
              required: true
              schema:
                type: string
          responses:
            '200':
              description: Database deleted successfully
    components:
      schemas:
        MySQLDatabase:
          type: object
          required:
            - apiVersion
            - kind
            - metadata
            - spec
          properties:
            apiVersion:
              type: string
              enum: ['platform.io/v1alpha1']
            kind:
              type: string
              enum: ['MySQLDatabase']
            metadata:
              type: object
              required:
                - name
                - namespace
              properties:
                name:
                  type: string
                  pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                namespace:
                  type: string
                labels:
                  type: object
                  additionalProperties:
                    type: string
                annotations:
                  type: object
                  additionalProperties:
                    type: string
            spec:
              type: object
              required:
                - compositionRef
                - parameters
              properties:
                compositionRef:
                  type: object
                  properties:
                    name:
                      type: string
                      enum: ['xmysqldatabase.platform.io']
                parameters:
                  type: object
                  required:
                    - databaseName
                    - username
                    - privileges
                  properties:
                    databaseName:
                      type: string
                      description: Name of the MySQL database
                      pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
                    databaseNamespace:
                      type: string
                      description: Namespace for the database
                    username:
                      type: string
                      description: Database username
                      pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
                    userNamespace:
                      type: string
                      description: Namespace for the user
                    privileges:
                      type: array
                      description: Database privileges for the user
                      items:
                        type: string
                        enum:
                          - SELECT
                          - INSERT
                          - UPDATE
                          - DELETE
                          - CREATE
                          - DROP
                          - INDEX
                          - ALTER
                    passwordSecretRef:
                      type: object
                      description: Reference to the secret containing the password
                      required:
                        - name
                        - namespace
                        - key
                      properties:
                        name:
                          type: string
                        namespace:
                          type: string
                        key:
                          type: string
                writeConnectionSecretToRef:
                  type: object
                  description: Where to write the connection details
                  properties:
                    name:
                      type: string
            status:
              type: object
              properties:
                conditions:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: ['Ready', 'Synced']
                      status:
                        type: string
                        enum: ['True', 'False', 'Unknown']
                      reason:
                        type: string
                      message:
                        type: string