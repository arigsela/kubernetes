# cert-manager v1.16.2 configuration
# Optimized for GKE cluster with system node pool scheduling

crds:
  enabled: true
  keep: true

enableCertificateOwnerRef: true

global:
  commonLabels: {}
  priorityClassName: ""
  rbac:
    create: true
  podSecurityPolicy:
    enabled: false
    useAppArmor: false  # GKE COS doesn't support AppArmor

controller:
  replicaCount: 1

  image:
    repository: quay.io/jetstack/cert-manager-controller
    pullPolicy: IfNotPresent

  resources:
    requests:
      cpu: 50m      # Increased for stability
      memory: 64Mi   # Increased for stability
    limits:
      cpu: 150m     # Increased for cert generation
      memory: 128Mi  # Increased for cert generation

  prometheus:
    enabled: true
    servicemonitor:
      enabled: false

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  nodeSelector:
    pool: system           # Schedule on system node pool
    kubernetes.io/os: linux
  tolerations: []
  affinity: {}

webhook:
  replicaCount: 1

  resources:
    requests:
      cpu: 20m      # Increased
      memory: 32Mi   # Increased
    limits:
      cpu: 100m
      memory: 64Mi

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  nodeSelector:
    pool: system           # Schedule on system node pool
    kubernetes.io/os: linux

cainjector:
  enabled: true
  replicaCount: 1

  resources:
    requests:
      cpu: 20m      # Increased
      memory: 32Mi   # Increased
    limits:
      cpu: 100m
      memory: 64Mi

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  nodeSelector:
    pool: system           # Schedule on system node pool
    kubernetes.io/os: linux

acmesolver:
  image:
    repository: quay.io/jetstack/cert-manager-acmesolver
    pullPolicy: IfNotPresent

startupapicheck:
  enabled: true

  resources:              # Added resource limits
    requests:
      cpu: 10m
      memory: 32Mi
    limits:
      cpu: 50m
      memory: 64Mi

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  nodeSelector:
    pool: system           # Schedule on system node pool
    kubernetes.io/os: linux

serviceAccount:
  create: true
  automountServiceAccountToken: true